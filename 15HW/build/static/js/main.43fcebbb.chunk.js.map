{"version":3,"sources":["assets/img/avatar.jpg","assets/img/arrow.svg","assets/img/arrow-c.svg","assets/img/chat.svg","assets/img/check.svg","assets/img/down.svg","assets/img/heart.svg","assets/img/1.jpg","assets/img/2.jpg","components/post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Post","props","className","src","photo","alt","name","CHECK","date","ARROW","content","image","CHAT","comments","ARROW_C","reposts","HEART","likes","DOWN","authors","ELON_IMAGE","nickname","POST_IMAGE_1","POST_IMAGE_2","App","map","author","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,oC,kBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,uOC+D5BC,EAtDF,SAACC,GAEV,OACI,yBAAKC,UAAU,QAEX,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,cACX,yBAAKC,IAAKF,EAAMG,MAAOC,IAAI,GAAGH,UAAU,WACxC,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,cAAcD,EAAMK,MACnC,yBAAKJ,UAAU,eACX,yBAAKA,UAAU,mBAAmBC,IAAKI,IAAOF,IAAI,MAEtD,yBAAKH,UAAU,cAAf,aACA,yBAAKA,UAAU,cAAcD,EAAMO,QAI3C,yBAAKN,UAAU,SACX,yBAAKC,IAAKM,IAAOJ,IAAI,GAAGH,UAAU,iBAI1C,yBAAKA,UAAU,WACX,yBAAKA,UAAU,iBAAiBD,EAAMS,SAEtC,yBAAKR,UAAU,gBACX,yBAAKC,IAAKF,EAAMU,MAAON,IAAI,GAAGH,UAAU,gBAIhD,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,YACX,yBAAKC,IAAKS,IAAMP,IAAI,GAAGH,UAAU,kBAC7B,8BAAOD,EAAMY,WAErB,yBAAKX,UAAU,YACX,yBAAKC,IAAKW,IAAST,IAAI,GAAGH,UAAU,kBAChC,8BAAOD,EAAMc,UAErB,yBAAKb,UAAU,YACX,yBAAKC,IAAKa,IAAOX,IAAI,GAAGH,UAAU,kBAC9B,8BAAOD,EAAMgB,QAErB,yBAAKf,UAAU,YACX,yBAAKC,IAAKe,IAAMb,IAAI,GAAGH,UAAU,sB,kDC9C/CiB,EAAU,CAAC,CACTb,KAAM,YACNF,MAAOgB,IACPC,SAAU,YACVX,QAAS,+JACTC,MAAOW,IACPd,KAAM,QACNK,SAAU,OACVE,QAAS,OACTE,MAAO,SAGX,CACIX,KAAM,YACNF,MAAOgB,IACPC,SAAU,YACVX,QAAS,IACTC,MAAOY,IACPf,KAAM,SACNK,SAAU,KACVE,QAAS,OACTE,MAAO,UAaAO,MATf,WACE,OACI,6BACKL,EAAQM,KAAI,SAAAC,GAAM,OAAI,kBAAC,EAAQA,QCxBtBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.43fcebbb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.b62e3b04.jpg\";","module.exports = __webpack_public_path__ + \"static/media/arrow.5429b6f7.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow-c.8d7e030c.svg\";","module.exports = __webpack_public_path__ + \"static/media/chat.16e3fd1e.svg\";","module.exports = __webpack_public_path__ + \"static/media/check.aed67ecc.svg\";","module.exports = __webpack_public_path__ + \"static/media/down.4de82427.svg\";","module.exports = __webpack_public_path__ + \"static/media/heart.f326b22f.svg\";","module.exports = __webpack_public_path__ + \"static/media/1.bd479754.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.8b06c80b.jpg\";","import React from \"react\";\r\nimport ARROW from \"../assets/img/arrow.svg\";\r\nimport ARROW_C from \"../assets/img/arrow-c.svg\";\r\nimport CHAT from \"../assets/img/chat.svg\";\r\nimport CHECK from \"../assets/img/check.svg\";\r\nimport DOWN from \"../assets/img/down.svg\";\r\nimport HEART from \"../assets/img/heart.svg\";\r\n\r\n\r\nconst Post = (props) => {\r\n\r\n    return (\r\n        <div className=\"post\">\r\n\r\n            <div className=\"post__info-general\">\r\n                <div className=\"post__info\">\r\n                    <img src={props.photo} alt=\"\" className=\"avatar\"/>\r\n                    <div className=\"post__details\">\r\n                        <div className=\"post__name\">{props.name}</div>\r\n                        <div className=\"post__check\">\r\n                            <img className=\"post__check-logo\" src={CHECK} alt=\"\"/>\r\n                        </div>\r\n                        <div className=\"post__nick\">@elonmusk</div>\r\n                        <div className=\"post__date\">{props.date}</div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"arrow\">\r\n                    <img src={ARROW} alt=\"\" className=\"arrow__img\"/>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"content\">\r\n                <div className=\"content__text\">{props.content}\r\n                </div>\r\n                <div className=\"content__img\">\r\n                    <img src={props.image} alt=\"\" className=\"post__img\"/>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"post__feedback\">\r\n                <div className=\"feedback\">\r\n                    <img src={CHAT} alt=\"\" className=\"feedback__img\"/>\r\n                        <span>{props.comments}</span>\r\n                </div>\r\n                <div className=\"feedback\">\r\n                    <img src={ARROW_C} alt=\"\" className=\"feedback__img\"/>\r\n                        <span>{props.reposts}</span>\r\n                </div>\r\n                <div className=\"feedback\">\r\n                    <img src={HEART} alt=\"\" className=\"feedback__img\"/>\r\n                        <span>{props.likes}</span>\r\n                </div>\r\n                <div className=\"feedback\">\r\n                    <img src={DOWN} alt=\"\" className=\"feedback__img\"/>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\nimport Post from \"./components/post\";\nimport ELON_IMAGE from \"./assets/img/avatar.jpg\";\nimport POST_IMAGE_1 from \"./assets/img/1.jpg\";\nimport POST_IMAGE_2 from \"./assets/img/2.jpg\";\n\n\n\nconst authors = [{\n        name: 'Elon Mask',\n        photo: ELON_IMAGE,\n        nickname: '@elonmusk',\n        content: 'ðŸ‡©ðŸ‡ªðŸ–¤Giga Berlin MannschaftðŸ–¤ðŸ‡©ðŸ‡ª Vielen Dank fÃ¼r Ihre hervorragende Arbeit an Giga Berlin!!',\n        image: POST_IMAGE_1,\n        date: '4 sep',\n        comments: '1,6k',\n        reposts: '3,8k',\n        likes: '60,1k'\n\n    },\n    {\n        name: 'Elon Mask',\n        photo: ELON_IMAGE,\n        nickname: '@elonmusk',\n        content: ' ',\n        image: POST_IMAGE_2,\n        date: '13 aug',\n        comments: '1k',\n        reposts: '2,4k',\n        likes: '30.8k'\n    }\n]\n\nfunction App() {\n  return (\n      <div>\n          {authors.map(author => <Post{...author}/>)}\n      </div>\n\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}